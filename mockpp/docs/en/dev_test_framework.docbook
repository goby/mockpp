<sect1 id="unittest-framework">
<title>Choosing a Unit Test Framework</title>

<para>Basically &mockpp; should work with every unittesting framework. It does
not necessarily need advanced features like runtime type information (RTTI)
or exceptions. But if possible they should both be used. RTTI provides some
information about the actual type in use. And exceptions help to avoid resource
leaks since the compiler adds code to destruct automatic variables.</para>

<para>The following section lists frameworks which have actually been used to
verify the correctness of &mockpp;. Each of the frameworks supports the automatic
registration of tests.
Additionally &mockpp; contains some specialised macros for better integration.</para>

<sect2 id="framework-cppunit">
<title>CppUnit</title>

<para>Tests with <ulink url="http://cppunit.sf.net">&cppunit;</ulink>
are usually grouped in classes. A method contains one
single test. Each of the tests is typically registered automatically with a test
runner by using some macros. This is internally done by instantiating a static
variable.</para>

<para>&cppunit; does not need RTTI to work but it relies on exceptions to check
assertions and report the results.</para>

<para>At runtime each of the methods are then invoked in unspecified order.</para>

<programlisting>

class AssertMo_test : public  CppUnit::TestFixture
{
 public:

  CPPUNIT_TEST_SUITE( AssertMo_test );
    CPPUNIT_TEST(test_A_includes);
  CPPUNIT_TEST_SUITE_END();

  void test_A_includes();
};

void AssertMo_test::test_A_includes()
{
  ...
}

CPPUNIT_TEST_SUITE_REGISTRATION (AssertMo_test);

</programlisting>

</sect2>


<sect2 id="framework-cxxtest">
<title>CxxTest</title>

<para>The original working method of
<ulink url="http://cxxtest.sf.net">&cxxtest;</ulink>
is different to &cppunit;. A perl
script searches the test sources and creates an additional source file which
is then compiled and run. All the library source files are directly included
into the main source file which means that you do not need to create a binary
library for &cxxtest;.</para>

<para>Since not every environment supports the execution of a perl script within
the edit-compile cycle &mockpp; contains some additional macros similar to
&cppunit; which
register the test methods automatically at runtime. The main difference is the
fact that the macros are located outside the class. Additionally the version of
&cxxtest; included in &mockpp; comes as binary library which should help to save
some memory and download time which is important on embedded platforms.</para>

<para>&cxxtest; does neither need RTTI nor exceptions to work. But it is possible
to check exception conditions.</para>

<para>Similar to &cppunit; the test methods are invoked in unspecified order.</para>

<programlisting>

class AssertMo_test : public  CxxTest::TestSuite
{
 public:

  void test_A_includes();
};

void AssertMo_test::test_A_includes()
{
  ...
}

MOCKPP_CXXTEST_SUITE_REGISTRATION( AssertMo_test );
MOCKPP_CXXTEST(AssertMo_test, test_A_includes);

</programlisting>

</sect2>

<sect2 id="framework-boost">
<title>Boost.Test</title>

<para><ulink url="http://www.boost.org">&boost.test;</ulink> does not need test
methods which reside in classes. It is also
possible to use free functions. On the other hand there is no mechanism
with <function>setup()</function>/<function>teardown()</function> like in
&cppunit; or &cxxtest;. Another advantage of &boost.test; is the possibility
to catch system exceptions or limit execution time with timeouts.</para>

<programlisting>

void test_freeFunction()
{
  ...
}

class AssertMo_test
{
 public:

  static void test_A_includes();
};

void AssertMo_test::test_A_includes()
{
  ...
}

void test_freeFunction()
{
  ...
}

MOCKPP_BOOST_TEST(test_freeFunction);
MOCKPP_BOOST_TEST(AssertMo_test::test_A_includes);

</programlisting>

</sect2>

<sect2 id="framework-select">
<title>Selecting a Framework at Compile Time</title>

<para>Since each of the frameworks has its special advantage it may be necessary to
switch at compile time under different environments. On a desktop computer
&boost.test; may be appropriate but for special tests on embedded platforms you
may prefer &cxxtest;.</para>

<para>&mockpp; uses some compiler switches and conditional macros to support the
formerly mentioned frameworks. The tests itself remain unchanged. Only the method
to register the tests and the invocation within <function>main()</function>
differs. Please see the various tests files <filename>*_tests.cpp</filename> and
<filename>mock_test.cpp</filename> in the <filename>tests</filename> directory.
Depending on the definition in the configuration file one of the following macros
is used to generate the according code.
<filename>SelectUnittestFramework.h</filename> contains all the definitions and
includes the needed header files.</para>

<programlisting>

#include &lt;mockpp/SelectUnittestFramework.h>

#if defined (MOCKPP_USE_CXXTEST)

#elif defined(MOCKPP_USE_BOOSTTEST)

#elif defined(MOCKPP_USE_CXXTEST)

#endif

</programlisting>

</sect2>

</sect1>
