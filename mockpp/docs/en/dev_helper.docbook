<sect1 id="devel-helper">
<title>Helpers</title>

<para>Some of the classes and functions from the &mockpp; library might be of general
use so they are listed in a chapter of their own.
</para>

<!-- ############################################################### -->

<sect2 id="asserter">
<title>Asserter</title>

<para>
A testing framework frequently uses assertions to check conditions of a running
application. To be able to express the intention there is a bunch of functions that do
special assertions.
</para>

<para>
Often you also want to provide the current filename and the source line to show the
location in some kind of output. To avoid having to add this
manually there are <token>#define</token>'s under a similar name that
do this automatically.
</para>

<para>
Some of the macros are self explanatory but some need a closer look. Here is a list
of the most important ones:

<programlisting>

   MOCKPP_ASSERT_TRUE(condition);
   MOCKPP_ASSERT_FALSE(condition);
   MOCKPP_ASSERT_EQUALS(a, b);
   MOCKPP_ASSERT_DELTA(a, b, delta); <co  id="delta-co"  linkends="assert-delta" />
   MOCKPP_ASSERT_BOUNDARY(lo, up, a); <co  id="boundary-co"  linkends="assert-boundary" />
   MOCKPP_ASSERT_INCLUDES(substr, target); <co  id="includes-co"  linkends="assert-includes" />
   MOCKPP_ASSERT_EXCLUDES(substr, target);
   MOCKPP_ASSERT_STARTSWITH(substr, target);
   MOCKPP_ASSERT_THROWING(action, action_descr, exception, exception_data);  <co  id="throwing-co"  linkends="assert-throwing" />
   MOCKPP_ASSERT_THROWING_COND(action, action_descr, exception, condition);

</programlisting>

<calloutlist>

  <callout arearefs="delta-co"  id="assert-delta" >
    <para>Sometimes you need to add some kind of tolerance to your comparison which
    is usually needed to compare two floating point numbers.
    The following formula verifies the equality of the two values:
    <literal role="equation">abs(actual - expected) &lt; abs(delta)</literal>.</para>
  </callout>

  <callout arearefs="boundary-co"  id="assert-boundary" >
    <para>This one is for cases when you want to make sure that a value lies
    between a lower and an upper boundary. If you have a special data type
    you should implement a meaningful <methodname>operator&lt;()</methodname>
    for comparision.</para>
  </callout>

  <callout arearefs="includes-co"  id="assert-includes" >
    <para>If you want to know if a substring is contained in another
    string you take this one. The following line contains it's counterpart
    which asserts the non-existence of a string. And finally the line after
    it checks if a string starts with the designated substring.</para>
  </callout>

  <callout arearefs="throwing-co"  id="assert-throwing" >
    <para>Another frequent task is to test the correct throwing of
    exceptions. This is easily done with the according macros.</para>
  </callout>

</calloutlist>

There are some more asserters which are of limited interest, see the api
documentation for
<filename class='headerfile'>Asserter.h</filename> and
<filename class='headerfile'>AssertMo.h</filename>
for a complete list. There you will also find a detailed description of
the above macros and the functions behind them.

</para>

</sect2>

<!-- ############################################################### -->

<sect2 id="formatter">
<title>Formatter</title>

<para>
Another frequent programming task is generating information for the user.
Often you have to assemble a string from several parts. Most of the time there
is some sort of format string to determine the basic information with some
placeholders at the desired position which are substituted with actual values.</para>

<para>A lot of people are using the <methodname>printf()</methodname> family for
outputting. Unfortunately these are not typesafe. And nor are they appropriate for
translations when the positions of the substituted parameters are swapped for
grammatical reasons.</para>

<para>So I decided to implement a typesafe approach which also takes the
position of the substituted values into account: each inserted value is converted
into its string representation and substitutes the placeholder
with the lowest number. Since such a placeholder consists of a percent sign and
a single digit there are up to ten substitutions possible.</para>

<para>The built-in methods handle the common data types like <token>int</token>,
<token>float</token> or <token>std::string</token>.
But it is also easily possible to extend the output capabilities for your own data types.
No changes inside the &mockpp; framework are needed, it needn't even be in the
&mockpp; namespace.</para>

<para>In the case you don't really want to output the content of an object but
simply need <methodname>operator&lt;&lt;()</methodname> because &mockpp; insists
on it for it's built-in debugging output you may use the default templates instead.
To avoid pontential conflicts these templates must be enabled by setting the macro
<token>MOCKPP_ENABLE_DEFAULT_FORMATTER</token> before including the first
&mockpp; header file.</para>

<para>It is also possible to reuse already existing streaming operators for
<classname>std::basic_ostream</classname>. The macros <token>MOCKPP_OSTREAMABLE</token>
and <token>MOCKPP_OWSTREAMABLE</token> create code for mockpp which uses the
standard streaming functions.</para>

<para>This collection of functions is inspired by the <classname>QString</classname> class
which is part of the <productname>Qt</productname> framework by
<ulink url="http://www.troll.no">Trolltech</ulink>.</para>


<programlisting>

  class Person <co  id="struct-co"  linkends="user-struct" />
  {
    public:

      Person(std::string in_name, unsigned in_age)
        : name(in_name)
        , age(n_age)
      {}

      String toString() const
      {
        String ret;
        ret &lt;&lt; name &lt;&lt; "(" &lt;&lt; age &lt;&lt; ")";
        return ret;
      }

    private:

      std::string  name;
      unsigned     age;
  };

  String &amp; operator&lt;&lt; (String &amp;formatter, const Person &amp;pers)
  {
     formatter &lt;&lt; pers.toString(); <co  id="shift-op-co"  linkends="shift-op" />
     return formatter;
  }

  class AnotherPerson : public Person
  {
  // ..
  };

  std::ostream &amp; operator&lt;&lt; (std::ostream &amp;os, const AnotherPerson &amp;pers)
  {
     os &lt;&lt; pers.toString();
     return os;
  }

  MOCKPP_OSTREAMABLE(AnotherPerson) <co  id="std-shift-op-co"  linkends="std-shift-op" />

  Person pers("Bob", 6);
  AnotherPerson otherpers("Alice", 7);
  String  format = "%5 and %4 say: %3 plus %2 gives %1";
  format &lt;&lt; "three" &lt;&lt; "two" &lt;&lt; "one" &lt;&lt; pers &lt;&lt; otherpers;
  std::cout &lt;&lt; format &lt;&lt; std::endl;

</programlisting>

<calloutlist>

  <callout arearefs="struct-co"  id="user-struct" >
    <para>Create a user defined data type with some internal data elements.
    Implement a method to create a string representation of the internal
    variables.</para>
  </callout>

  <callout arearefs="shift-op-co"  id="shift-op" >
    <para>Output the string representation of the object.</para>
    <para>The resulting output:
    <computeroutput>Alice(7) and Bob(6) say: one plus two gives three</computeroutput></para>
  </callout>

  <callout arearefs="std-shift-op-co"  id="std-shift-op" >
    <para>Output the string using an existing standard streaming operator.</para>
  </callout>

</calloutlist>

</sect2>

<!-- ############################################################### -->

<sect2 id="throwables">
<title>Throwables</title>

<para>
Throwing arbitrary exceptions is a bit of a problem since the type of the exception
is determined at compile time. So if you want to store an exception and throw it
some time later at a maybe unknown position in your code you must wrap it in an
envelope and delegate the process of throwing to this wrapper.</para>

<para>Similar to the according Java classes they are called
<classname>Throwables</classname>.
&mockpp; provides several classes and functions to deal with single or lists of throwables
as well as creating them from ordinary values.</para>

<programlisting>

  ThrowableItem it (make_throwable(float(1.234))); <co  id="throwitem1-co"  linkends="throwitem1" />
  it.get()->throw_me(); <co  id="throwitem2-co"  linkends="throwitem2" />

  ThrowableList lit; <co  id="throwlist1-co"  linkends="throwlist1" />
  lit.push_back(make_throwable(std::string("data"))); <co  id="throwlist2-co"  linkends="throwlist2" />
  lit.push_back(make_throwable(unsigned(123)));
  lit.nextThrowableObject()->throw_me(); <co  id="throwlist3-co"  linkends="throwlist3" />

</programlisting>

<calloutlist>
  <callout arearefs="throwitem1-co"  id="throwitem1" >
    <para>Create a throwable object with a float value as payload.</para>
  </callout>

  <callout arearefs="throwitem2-co"  id="throwitem2" >
    <para>Throw it.</para>
  </callout>

  <callout arearefs="throwlist1-co"  id="throwlist1" >
    <para>Create a list of throwable objects.</para>
  </callout>

  <callout arearefs="throwlist2-co"  id="throwlist2" >
    <para>Add some objects to our list. Note that the objects have
    completely different types.</para>
  </callout>

  <callout arearefs="throwlist3-co"  id="throwlist3" >
    <para>Get the first available object from the list and throw it.</para>
  </callout>
</calloutlist>

</sect2>

</sect1>
