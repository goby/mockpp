<?xml version="1.0" encoding="UTF-8"?>
<!-- Support for Production Code

     $Id: dev_production.docbook 1078 2005-12-27 18:01:44Z ewald-arnold $
-->
<sect1 id="production">
  <title>Support for Production Code</title>

  <para>To effectively benefit from unit tests it is frequently necessary to
  optimise production code. The following sections show some of the
  possibilities. The common pattern is as usual to delegate the detailed work
  to a helper class which is appropriately instantiated.</para>

  <para>Some of the following approaches have the drawback to weaken the
  protection of your class members. You have to decide yourself if this is
  acceptable for you.</para>

  <para>But you should keep in mind that mechanisms like
  <keysym>protected</keysym> or <keysym>private</keysym> only defend from
  Murphy (unintentional usage) and not from Machiavelli (evil abuse). A
  potential attacker can simply copy a class declaration, remove all
  <keysym>private</keysym> and <keysym>protected</keysym> keywords and then
  access everything by doing a simple typecast. C++does not have run-time
  protection.</para>

  <sect2 id="reproducible-time-values">
    <title>Reproducible Time Values</title>

    <para>Sometimes you need predictable time values. Either you want to
    minimise the impact of timeouts in error conditions or prevent idle times.
    <application>mockpp</application> contains a sample implementation of how
    to handle calls to <methodname>std::time()</methodname>. This only covers
    a resolution of 1 second. If you need a more sophisticated solution you
    have to create your own code similar to this example. See the sources and
    documentation about <classname>RealTimeServer</classname> and
    <classname>MockTimeServer</classname>.<programlisting>// prototype for the method under test:
void myTimedMethod(TimeServer *time);

// in production code:
RealTimeServer rt_server;
myTimedMethod(&amp;rt_server);

// in test code:
MockTimeServer mock_server;
mock_server.addUnixTime(0x123456);
myTimedMethod(&amp;mock_server);
</programlisting></para>
  </sect2>

  <sect2 id="accessing-protected-elements">
    <title>Accessing protected elements</title>

    <para>Usually you will protect internal members in your classes. Variables
    should almost always be <keysym>private</keysym>, in very rare cases
    <keysym>protected</keysym>. So they are out of reach for your testing
    code. Since variables are very internal you should not try to make them
    accessible somehow. The following sections show some patterns how to use
    member methods to intentionally grant access to parts which are actually
    internal.</para>

    <sect3>
      <title>Lifting class members</title>

      <para>One of the simplest methods to get access to interesting methods
      is to use a <keysym>using</keysym> declaration in a simple derived class
      to lift the member into <keysym>public</keysym> area. Of course this is
      only possible for <keysym>protected</keysym> methods and not for
      <keysym>private</keysym> ones.</para>

      <para>It may be a nice compromise to make a <keysym>private</keysym>
      method more general and more robust in order to make it
      <keysym>protected</keysym> and test it this way.</para>

      <para><programlisting>class Sample
{
   Sample();

  protected:

    void interesting_internal_method();
};


class TestSample : public Sample
{

 public:

   using Sample::interesting_internal_method;
};

// in test code
TestSample sample;
sample.interesting_internal_method();
</programlisting></para>
    </sect3>

    <sect3>
      <title>Injecting a Mock Object</title>

      <para>Another possibility is to implement access to internal variables
      via getter and setter methods. If you make such methods
      <keysym>private</keysym> and <keysym>virtual</keysym> you prevent its
      direct use but still have the chance to overload the getter method in
      the tests. This way it is possible to insert mock objects to replace
      internal variables.</para>

      <para><programlisting>class Sample
{
  private:

    virtual Complicated *getVariable()
    {
      return &amp;variable;
    }

    Complicated    variable;
};


class MockComplicated : public Complicated
{
  // mock needed capabilities
};


class DerivedSample : public Sample
{
  private:

    virtual Complicated *getVariable()
    {
      return &amp;mock;
    }

  public:

    MockingComplicated  mock;
};
</programlisting></para>
    </sect3>
  </sect2>
</sect1>