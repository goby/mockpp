///////////////////////////////////////////////////////////////////
// Automatically generated by xml2mockpp v1.16.4.
// xml2mockpp is part of Mock Objects for C++.
// See also http://mockpp.sourceforge.net
//
// Don't edit manually unless you know what you are doing
///////////////////////////////////////////////////////////////////

#include <mockpp/mockpp.h> // always first

#define MOCKPP_ENABLE_DEFAULT_FORMATTER
#include <mockpp/compat/Formatter.h>

#include "MockppIdlTest_mock.h"


MockppIdlTestMock::MockppIdlTestMock(const MOCKPP_NS::String &name, MOCKPP_NS::VerifiableList *parent)
  : MOCKPP_NS::ChainableMockObject(name, parent)
  , MockppIdlTest()
  , first_url4_ovr4_mocker(MOCKPP_PCHAR("MockppIdlTestMock::first_url4_ovr4"), this)
  , first_url4_ovr3_mocker(MOCKPP_PCHAR("MockppIdlTestMock::first_url4_ovr3"), this)
  , first_url4_ovr2_mocker(MOCKPP_PCHAR("MockppIdlTestMock::first_url4_ovr2"), this)
  , first_url4_ovr1_mocker(MOCKPP_PCHAR("MockppIdlTestMock::first_url4_ovr1"), this)
  , first_url4_ovr0_mocker(MOCKPP_PCHAR("MockppIdlTestMock::first_url4_ovr0"), this)
  , constTest_mocker(MOCKPP_PCHAR("MockppIdlTestMock::constTest"), this)
  , constRefTest_mocker(MOCKPP_PCHAR("MockppIdlTestMock::constRefTest"), this)
  , firstViewConst_mocker(MOCKPP_PCHAR("MockppIdlTestMock::firstViewConst"), this)
  , firstView_mocker(MOCKPP_PCHAR("MockppIdlTestMock::firstView"), this)
  , nextView1_mocker(MOCKPP_PCHAR("MockppIdlTestMock::nextView1"), this)
  , nextView2_mocker(MOCKPP_PCHAR("MockppIdlTestMock::nextView2"), this)
  , getNumObjects_mocker(MOCKPP_PCHAR("MockppIdlTestMock::getNumObjects"), this)
  , getObject_mocker(MOCKPP_PCHAR("MockppIdlTestMock::getObject"), this)
  , getNumPages_mocker(MOCKPP_PCHAR("MockppIdlTestMock::getNumPages"), this)
  , last_url4_ovr0_mocker(MOCKPP_PCHAR("MockppIdlTestMock::last_url4_ovr0"), this)
  , last_url4_ovr1_mocker(MOCKPP_PCHAR("MockppIdlTestMock::last_url4_ovr1"), this)
  , last_url4_ovr2_mocker(MOCKPP_PCHAR("MockppIdlTestMock::last_url4_ovr2"), this)
{
}


MockppIdlTestMock::MockppIdlTestMock(int i, const std::string & s, const MOCKPP_NS::String &name, MOCKPP_NS::VerifiableList *parent)
  : MOCKPP_NS::ChainableMockObject(name, parent)
  , MockppIdlTest(i, s)
  , first_url4_ovr4_mocker(MOCKPP_PCHAR("MockppIdlTestMock::first_url4_ovr4"), this)
  , first_url4_ovr3_mocker(MOCKPP_PCHAR("MockppIdlTestMock::first_url4_ovr3"), this)
  , first_url4_ovr2_mocker(MOCKPP_PCHAR("MockppIdlTestMock::first_url4_ovr2"), this)
  , first_url4_ovr1_mocker(MOCKPP_PCHAR("MockppIdlTestMock::first_url4_ovr1"), this)
  , first_url4_ovr0_mocker(MOCKPP_PCHAR("MockppIdlTestMock::first_url4_ovr0"), this)
  , constTest_mocker(MOCKPP_PCHAR("MockppIdlTestMock::constTest"), this)
  , constRefTest_mocker(MOCKPP_PCHAR("MockppIdlTestMock::constRefTest"), this)
  , firstViewConst_mocker(MOCKPP_PCHAR("MockppIdlTestMock::firstViewConst"), this)
  , firstView_mocker(MOCKPP_PCHAR("MockppIdlTestMock::firstView"), this)
  , nextView1_mocker(MOCKPP_PCHAR("MockppIdlTestMock::nextView1"), this)
  , nextView2_mocker(MOCKPP_PCHAR("MockppIdlTestMock::nextView2"), this)
  , getNumObjects_mocker(MOCKPP_PCHAR("MockppIdlTestMock::getNumObjects"), this)
  , getObject_mocker(MOCKPP_PCHAR("MockppIdlTestMock::getObject"), this)
  , getNumPages_mocker(MOCKPP_PCHAR("MockppIdlTestMock::getNumPages"), this)
  , last_url4_ovr0_mocker(MOCKPP_PCHAR("MockppIdlTestMock::last_url4_ovr0"), this)
  , last_url4_ovr1_mocker(MOCKPP_PCHAR("MockppIdlTestMock::last_url4_ovr1"), this)
  , last_url4_ovr2_mocker(MOCKPP_PCHAR("MockppIdlTestMock::last_url4_ovr2"), this)
{
}


std::string * MockppIdlTestMock::first_url4()
{
  return first_url4_ovr4_mocker.forward();
}


std::string * MockppIdlTestMock::first_url4(int i)
{
  return first_url4_ovr3_mocker.forward(i);
}


std::string * MockppIdlTestMock::first_url4(long int li)
{
  return first_url4_ovr2_mocker.forward(li);
}


const void * MockppIdlTestMock::first_url4(float li)
{
  return first_url4_ovr1_mocker.forward(li);
}


void * const MockppIdlTestMock::first_url4(double li)
{
  return first_url4_ovr0_mocker.forward(li);
}


std::string MockppIdlTestMock::constTest() const
{
  return constTest_mocker.forward();
}


std::string & MockppIdlTestMock::constRefTest() const
{
  mockpp_refFor_constRefTest = constRefTest_mocker.forward();
  return mockpp_refFor_constRefTest;
}


long int ** MockppIdlTestMock::firstViewConst() const
{
  return firstViewConst_mocker.forward();
}


void * MockppIdlTestMock::firstView()
{
  return firstView_mocker.forward();
}


void * MockppIdlTestMock::nextView1(int i, long int l, std::string & s, const bool * b, char c) const
{
  return nextView1_mocker.forward(i, l, s, ( bool *& )(b), c);
}


void * MockppIdlTestMock::nextView2(int i, long int l, std::string & s, bool * const b, char c) const
{
  return nextView2_mocker.forward(i, l, s, ( bool * & )(b), c);
}


void MockppIdlTestMock::getNumObjects(std::string s)
{
  getNumObjects_mocker.forward(s);
}


const void * MockppIdlTestMock::getObject(const std::string & s)
{
  return getObject_mocker.forward(( std::string & )(s));
}


int MockppIdlTestMock::getNumPages(const std::wstring & s) throw(/* todo */)
{
  return getNumPages_mocker.forward(( std::wstring & )(s));
}


const std::string * MockppIdlTestMock::last_url4()
{
  return last_url4_ovr0_mocker.forward();
}


std::string ***** MockppIdlTestMock::last_url4(int i)
{
  return last_url4_ovr1_mocker.forward(i);
}


std::string * MockppIdlTestMock::last_url4(long int li) throw(/* todo */)
{
  return last_url4_ovr2_mocker.forward(li);
}


