<!-- Introduction advanced mock objects

     $Id: dev_advanced_intro.docbook 1126 2006-01-07 11:39:50Z ewald-arnold $
-->

<sect2 id="adv-intro-object-intro">
<title>Introduction to Advanced Mock Objects</title>

<sect3 id="adv-work-method">
<title>The Standard Working Method</title>

<para>To emulate the behaviour of an object in your production code
you need more than just single values that meet your expectations. Usually
you need a collection of the different expectation types and some code
to generate a deterministic and predictable behaviour to test a limited area.</para>

<para>The following methods all require a separation of the code under test and the
code using it. But most of the times you would split the two parts
anyway to increase maintainability.</para>

<programlisting>

  class MyInterface <co id="interface1-class-co"  linkends="interface1-class" />
  {
    public:

      virtual void theMethod(unsigned param) = 0;
  };

  class MyProductionClass : public MyInterface <co  id="production-class-co"  linkends="production-class" />
  {
    public:

      virtual void theMethod(unsigned param)
      {
        ...
      }
  };

  class MyMockObject : public MyInterface <co  id="adv-intro-class-co"  linkends="adv-intro-class" />
  {
      ExpectationList&lt;unsigned> methParams;

    public:

      MyMockObject(String name, Verifiable *v)
        : MockObject(name, v)
        , methParams("method parameters", this)
      {
        methParams.addExpected(1);
        methParams.addExpected(2);
      }

      virtual void theMethod(unsigned param)
      {
        methParams.addActual(param);
        ...
      }
  };


  MyMockObject mo (MOCKPP_PCHAR("mockObject"), 0);
  myMethodUnderTest(&amp;mo); <co id="adv-intro-pass-co"  linkends="adv-intro-pass" />
  mo.verify();


  MyProductionClass pro;
  myMethodUnderTest(&amp;pro); <co id="prod-pass-co"  linkends="prod-pass" />

</programlisting>

<calloutlist>

  <callout arearefs="interface1-class-co"  id="interface1-class" >
    <para>Define an interface class which contains all the methods that
    describe some real world behaviour. This interface class is also used
    to implement the real world class.</para>
    <para> The intention is to pass a real world
    object in the running application or a mock object while executing tests.</para>
  </callout>

  <callout arearefs="production-class-co"  id="production-class" >
    <para>Derive your real world production code from the abstract base class
    to implement our interface as you need it.</para>
  </callout>

  <callout arearefs="adv-intro-class-co"  id="adv-intro-class" >
    <para>Derive the mock object and implement it with a minimum of the functionality
    required in an absolutely deterministic way. In the example we set up a list
    of expected parameters to the method and have it verified by the
    mock object automatically.</para>
  </callout>

  <callout arearefs="adv-intro-pass-co"  id="adv-intro-pass" >
    <para>Instantiate the mock object and pass it to the method you want to test
    while you are in the test routines. After completing the test code call
    <methodname>verify()</methodname> to check all pending expectations.</para>
  </callout>

  <callout arearefs="prod-pass-co"  id="prod-pass" >
    <para>To run the production code instantiate the real object and pass it to
    the method.</para>
  </callout>

</calloutlist>
</sect3>

<sect3>
<title>The Main Mock Object Classes</title>

<para>Since most of the tasks concerning mock objects occur frequently and in a similar
manner there are some classes which support automated behaviour with different approaches.
Depending on your personal taste or special problems you may choose the one or the other.</para>

<itemizedlist>
 <listitem>The first possibility is modeled by a class called
 <classname>VisitableMockObject</classname>. It was named like this
because you set up part of its behaviour by recording an execution path for the tests,
thus by "visiting" the object. This approach is rather strict because the invocation order
and parameter values must match exactly. Unfortunately it is almost impossible to add
new capabilities.
</listitem>

<listitem>The second approach is represented by the class <classname>ChainableMockObject</classname>.
The name stems from the fact that you define the
behaviour with a "chain" of invocations of a helper object. Each chain link sets a constraint, a return
value or some other aspect. The big benefit from this approach is the extensibility
concerning the behaviour by simply feeding it new objects which reflect your needs. Therefor it is
far more flexible in execution: everything depends on user defined objects outside the
mock object. A large set of such classes is already included.</listitem>

</itemizedlist>

<para>More detailed explanations follow in later chapters.</para>

</sect3>

<sect3 id="setup_behaviour">
<title>How To Set Up Behaviour</title>

<para>The basic principle for the use of these classes is the same for both methods:

<itemizedlist>
 <listitem>Derive from the interface class and the according mock object class.</listitem>
 <listitem>Add the methods and their potential internal variables.</listitem>
 <listitem>Use one of the available methods to construct a helper object
           to set up the detailed behaviour.</listitem>
</itemizedlist>
</para>

There are two standard ways to set up the behaviour of advanced mock objects.

<itemizedlist>
 <listitem><para>The traditional way using macros which implement everything behind the
  scenes and an additional helper object which controls these helper objects.</para>

  <para>But caution: if you take the wrong macro or maybe just have a small typo you will get loads
  of error messages all pointing to the same line. I strongly recommend to take little steps when setting
  up such objects: add one single method and compile. To get started I recommend to
  use the "recipes" below.</para>

  <para>If you want to have an overview what is created behind the scenes, look at
  <filename>chainable-template.h</filename> and
  <filename>visitable-template.h</filename> which contain example classes with some methods.
  They were preprocessed, automatically indented and are quite readable.
  This knowledge might become useful when you need to find out more about the referenced objects
  and their internal helper variables when runtime errors occur.</para>
 </listitem>

 <listitem><para>The newer and recommended approach with the help of mock methods.
 The methods are templates which wrap the method under test. Since they are fully
 accessible in contrast to an obscure macro they are easier to use and better to debug.</para>

 <para>For both the Visitable and the Chainable types there are sets of templates
 for mock methods according to the number of parameters the method under test takes.
 But most of
 the current compilers support a shorthand version which selects the needed
 template automatically.</para>

 <para>So the following lines are equivalent:

 <programlisting>

  VisitableMockMethod0&lt;void>           mmv0(MOCKPP_PCHAR("mm0"), 0);
  VisitableMockMethod1&lt;void, int>      mmv1(MOCKPP_PCHAR("mm1"), 0);
  VisitableMockMethod2&lt;void, int, int> mmv2(MOCKPP_PCHAR("mm2"), 0);

  VisitableMockMethod&lt;void>            mmvd0(MOCKPP_PCHAR("mm0"), 0);
  VisitableMockMethod&lt;void, int>       mmvd1(MOCKPP_PCHAR("mm1"), 0);
  VisitableMockMethod&lt;void, int, int>  mmvd2(MOCKPP_PCHAR("mm2"), 0);
 </programlisting>

 </para>
 </listitem>
</itemizedlist>

 <para>There is another point to keep in mind when choosing either the macros or the
 templates. There are only macros available for up to five parameters. Extending this
 number probably results
 in a lot of coding and debugging. The templates on the other hand are generated by several
 scripts. The standard distribution supports up to 6 parameters. If you need more you only
 have to invoke <filename>gen_files_N.sh</filename> in the top level directory of the
 source distribution. Supply the maximal number of parameters you need and all the header
 files are generated.</para>

</sect3>

<sect3 id="choosing_macro">
<title>Choosing the macros</title>

<para>There are sets of macros for const and non-const methods, the visitable and the chainable
way and each combination of them with up to five parameters. I assume you will not want
to have code with more than 5 parameters. But if you really think you need more, take
the macros with 5 parameters and try to extend it. It is really straightforward and please
don't forget to extend the test files. You may then of course send
<ulink url="mailto::mockpp at ewald-arnold dot de">me</ulink>
the result for inclusion and further maintainance.</para>

<para>Due to the nature of macros there are some limitations concerning the automatically
generated methods and the according internal helper variables.

<itemizedlist>
 <listitem>Every type in the parameter list may need a default constructor.</listitem>
 <listitem>Pointer values may be compared with their address and not with the value they point to.</listitem>
 <listitem>With the above macros only <token>const &amp; X</token> types are possible in the parameter
           list. You don't actually see it but that's what internally happens. If you have
           a <token>const</token> parameter or a simple type you must use an extended set of macros which
           distinguishes between the method parameters and the declaration of the internal helper
           variables. </listitem>
 <listitem>If you have overloaded methods you must use the extended macros as well. They
           extend the internal variables names which are derived form the
           method name. Otherwise there would be a conflict.</listitem>
 <listitem><para>It may become necessary to implement <methodname>operator&lt;&lt;()</methodname> as
           debug output is created this way. One approach is to provide a meaningful operator method.
           If this
           does not make much sense you may use a default template instead which simply outputs
           the raw classname. To avoid pontential conflicts this template must be
           enabled by setting the macro
           <token>MOCKPP_ENABLE_DEFAULT_FORMATTER</token> before including the first &mockpp; header
           file.</para>
           <para>It is also possible to re-use an existing
           <methodname>operator&lt;&lt;(std::ostream &amp;, const T &amp;val)</methodname>.
           In this case you supply depending on the string type one of the macros
           <token>MOCKPP_OWSTREAMABLE</token>
           or <token>MOCKPP_OSTREAMABLE</token>. This implements a simple string translator function.
           </para>
 </listitem>
</itemizedlist>
</para>

<para>The total number of macros is quite huge but there is a scheme behind it:

<itemizedlist>
 <listitem>
  <para>
  The macro for the initialiser list in the constructor is built like this:
  <itemizedlist>
  <listitem>Always start with <token>MOCKPP_CONSTRUCT_MEMBERS_FOR_</token></listitem>
  <listitem>If the method is of type <token>void</token> add <token>VOID_</token></listitem>
  <listitem>For chainable object append <token>CHAINABLE</token></listitem>
  <listitem>Visitable object need <token>VISITABLE</token> instead</listitem>
  <listitem>Finally append the number of method parameters <token>0 .. 5</token></listitem>
  </itemizedlist>
  </para>
 </listitem>

 <listitem>
  <para>
  To determine the macro for the method write the following:
  <itemizedlist>
  <listitem>Always start with <token>MOCKPP_</token></listitem>
  <listitem>If the method is of type <token>void</token> add <token>VOID_</token></listitem>
  <listitem>In case the method is of type <token>const</token> write <token>CONST_</token></listitem>
  <listitem>For chainable object append <token>CHAINABLE</token></listitem>
  <listitem>whereas visitable object need <token>VISITABLE</token></listitem>
  <listitem>Extended macros with explicit method types need <token>_EXT</token></listitem>
  <listitem>Finally append the number of method parameters <token>0 .. 5</token></listitem>
  </itemizedlist>
  </para>
 </listitem>

 <listitem>
  <para>
  The macro for the helper object to set up the behaviour needs these steps:
  <itemizedlist>
  <listitem>Always start with <token>MOCKPP_</token></listitem>
  <listitem>For chainable object append <token>CHAINER_FOR</token></listitem>
  <listitem>whereas visitable object need <token>CONTROLLER_FOR</token></listitem>
  <listitem>Extended macros with explicit method types need <token>_EXT</token></listitem>
  </itemizedlist>
  </para>
 </listitem>
</itemizedlist>
</para>

<para>Here are some examples:
<itemizedlist>
 <listitem>A void method with 5 parameters in a chainable mock object:
           <token>MOCKPP_VOID_CHAINABLE5</token></listitem>
 <listitem>A void and const method without parameters in a visitable mock object
           and extended parameter values and method name:
           <token>MOCKPP_VOID_CONST_VISITABLE_EXT0</token></listitem>
 <listitem>Macro for initialiser list for a void method with 2 parameters:
           <token>MOCKPP_CONSTRUCT_MEMBERS_FOR_VOID_CHAINABLE2</token></listitem>
 </itemizedlist>

To see examples for all the macros have a look at the unit test files in the
<filename>tests</filename> directory. Especially interesting are the files
<filename>ChainableMockObject_*</filename> and
<filename>VisitableMocObject_*</filename>.
</para>

<para>
If the available mock objects and methods don't give you fine enough control over
your mock object there is
only one solution: code and implement the desired behaviour manually. Look at
<filename>chainable-template.h</filename> and
<filename>visitable-template.h</filename> to get an idea of the
standard implementation.
</para>

<para>
But I assume this will
not happen too often because mock objects should only cover a very limited aspect, only what is
currently really needed for a special test scope.
</para>

</sect3>


<sect3 id="auto-verify">
<title>Automated Verification</title>

<para>After the last invocation to a mock object has occurred you should always invoke
<methodname>verify()</methodname> on the mock object to verify all pending expectations.
Maybe there are some unused return objects or outstanding calls. If you use &cppunit; as
test framework you should use <classname>VerifyingTestCase</classname> from &mockpp;
and register your mock objects on creation with it. In contrast to the standard
<classname>TestCase</classname> from the &cppunit; package it invokes <methodname>verify()</methodname>
on all mock objects after a test case passed. This way it is impossible to forget it.</para>

<para>Unfortunately this class is partially based on an error in reasoning and became
more complicated as originally thought. So it is less useful as expected. Decide
yourself if it is of any advantage in your application.</para>

</sect3>

</sect2>
