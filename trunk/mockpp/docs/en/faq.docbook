<!-- The faqs

     $Id: faq.docbook 1309 2007-04-14 08:48:54Z ewald-arnold $
-->

<chapter id="faq">
<title>Frequently And Never Asked Questions</title>

<qandaset id="faqlist">

 <qandaentry>
  <question>
   <para>I have the following simple method but it does not compile when
   using the macros.</para>
    <para>
    <programlisting>

     const X&amp; method(int p1);
    </programlisting>
   </para>
  </question>

  <answer>
   <para>Since &mockpp; emulates all method calls there is no variable to which you
         can return a reference. One solution is, to use a shadow method. The trick
         is to separate the mocking elements and the method in question which contains
         a real variable.

    <programlisting>

     MOCKPP_VISITABLE1(ClassName, shadow_method, int);

     X shadow_variable;  // the variable is a class member

     const X&amp; method(int p1)
     {
        shadow_variable = shadow_method(p1);
        return shadow;
     }
    </programlisting>
   </para>

   <para>A similar problem arises when you need to pass values back by a
   parameter reference. In this case you can use
   <link linkend="outbound"><classname>OutBound</classname></link>
   to return predefined values. Please also understand that this problem
   does not arise when using the mock method templates. In this case
   you have to create the forwarding method anyway.</para>

  </answer>

 </qandaentry>

 <!-- -->

 <qandaentry>
  <question>
   <para>How should one organise production code and test code?</para>
  </question>

  <answer>
   <para>There is no general solution how to organise the sources to both run the tests
         and create a releasable binary without debugging and test code.</para>

   <para>A flexible and clean approach is the one used within &mockpp;:
     <itemizedlist>
       <listitem>Place all the classes and functions of your production code into
                 appropriate libraries. All the source code for the according library
                 is in a separate subdirectory.</listitem>

       <listitem>Create a minimalistic application source file with your
                 <methodname>main()</methodname> in a top-level directory.
                 This application uses the former libraries.</listitem>

       <listitem>Create a subdirectory <filename>tests</filename> within each sub-project
                 which contains all the test files needed. Depending on your test framework
                 the test files form a library or an executable. Upon execution the above libray
                 with the production code is linked dynamically.</listitem>
     </itemizedlist>

     So the layout of your project tree might look like this:

     <programlisting>

       projectroot
                 \_ main()
                 |
                 \_ subproject1
                 |             \_ tests
                 |
                 \_ subproject2
                               \_ tests

     </programlisting>

   </para>
  </answer>

 </qandaentry>

 <!-- -->


 <qandaentry>
  <question>
   <para>Why does &mockpp; uses that rather complicated <classname>Formatter</classname>
   class?</para>
  </question>

  <answer>
  <para>The two reasons to use this approach were enhanced readability and
  better support for internationalisation:</para>

  <para>Simply take the example from the handbook:

  <programlisting>

    Person pers("Bob", 6);
    String  format = "%4 says: %3 plus %2 gives %1";

    string one = "one";
    string two = "two";
    string three = "three";

    format &lt;&lt; three   // %1
           &lt;&lt; two     // %2
           &lt;&lt; one     // %3
           &lt;&lt; pers;   // %4

    std::cout &lt;&lt; format &lt;&lt; std::endl;
  </programlisting>

  The format string already gives you a good idea about the result, you only
  have to substitute the <token>%</token> by the actual values.</para>

  <para>Please also understand that I intentionally reverted the order of the
  <token>%</token>-substitutes to show this possibility. More about the need for
  this below.</para>

  <para>On the contrary it is far more difficult to understand the outcome with
  standard streaming operators:

  <programlisting>

    cout &lt;&lt; pers.toString()
         &lt;&lt; " says: "
         &lt;&lt; one
         &lt;&lt; " plus "
         &lt;&lt; two
         &lt;&lt; " give "
         &lt;&lt; three;
  </programlisting>

  I am pretty sure you will forget the one or the other space which separates
  for example the literal "plus" from the variable "two".</para>


  <para>The other important point is: you can't translate the second solution reasonably.
  Translating "says:" and "plus" separately and concatenating them like above often
  results in the nonsense you get when you read manuals for devices from
  the far east. Often also the order of the substituted words change in the
  translated version. In this case the translator simply would swap <token>%1</token>
  and <token>%2</token>.</para>

  <para>Maybe you don't find it worth the effort but english is not the only language
  on earth, so why not prepare a nice way to translate the library?
  Someone interested in a translated version simply uses <command>xgettext</command>
  to collect the strings, translates them with a simple editor and replaces macro
  <function>mockpp_i18n()</function> with the according call from the standard
  <systemitem class="library">intl</systemitem> package.</para>

  <para>And overloading <function>operator&lt;&lt;</function> is similar to the standard
  iomanip functions:

  <programlisting>

  class CA
  {
    String toString()
    {
      ...
    }
    ...
  };

  String &amp; operator &lt;&lt; (String &amp;formatter, const CA &amp;o)
  {
    return ::operator&lt;&lt; (formatter, o.toString());
  }
  </programlisting>

  Additionally you can use <function>MOCKPP_ENABLE_DEFAULT_FORMATTER</function>
  to generate a default <function>operator&lt;&lt;</function> which outputs the
  class name which is often enough.</para>

  </answer>
 </qandaentry>

 <!-- -->

 <qandaentry>
  <question>
   <para>How can I mock a method which takes a reference to an incomplete class?</para>
  </question>

  <answer><para>

   <programlisting>

   class Interface
   {
      public:
         void someMethod(const Interface&amp; iface) = 0;

   };

   class MyMock : public VisitableMockObject
                , public Interface
   {
     public:

      MyMock()
        : VisitableMockObject("MyMock", 0
        , someMethod_mocker("someMethod", this)
      {}

      void someMethod(const Interface&amp; iface)
      {
        someMethod_mocker.forward(iface);
      }

      VisitableMockMethod1&lt;void, Interface&gt; someMethod_mocker;
   };

   </programlisting>

  Somewhere deep in the library &mockpp; needs a variable to hold the
  contents behind the reference. Since the class is incomplete the copy contructor
  will always fail. But it should work to use a pointer instead the reference.
  The interface of the mocked method remains the same but all the &mockpp;
  specific stuff uses the pointer:

   <programlisting>

   void someMethod(const Interface&amp; iface)
   {
     someMethod_mocker.forward(&amp;iface);
   }

   VisitableMockMethod1&lt;void, Interface * &gt; someMethod_mocker;
   </programlisting>
  </para>
  </answer>
 </qandaentry>

 <!-- -->

 <qandaentry>

  <question>
   <para>Is it possible to mock a function with a default parameter?</para>
  </question>

  <answer><para>Due to the internal macro structure it is not possible to add default parameters in
  mock methods. Providing this possibility would require another set of macros which is
  not reasonable.</para>

  <para>But you don't actually need it. A mock object is derived from a more or less abstract base class.
  Since default values should never change, the according default value is also in the base
  class, even it is pure virtual. The production code should only know about the base class which
  contains the default value, so all you need is already available.</para>
  </answer>

 </qandaentry>

 <!-- -->

 <qandaentry>

  <question>
   <para>Where can I ask a question regarding &mockpp;?</para>
  </question>

  <answer>
   <para>Send a mail to the according
   <ulink url="http://sourceforge.net/mail/?group_id=69135">mailing list</ulink>
   or point your browser to the
   <ulink url="http://sourceforge.net/forum/?group_id=69135">forum</ulink>.</para>
  </answer>

 </qandaentry>

</qandaset>

</chapter>


